{
    "landingSection": {
        "title" : "Hi! I'm Cristina",
        "description" : "and I'm a junior web developer based in Bucharest"
    },
    "aboutSection" : [
        {
            "title": "Education",
            "icon" : "faBuildingColumns",
            "description": "Graduated Electronics, Telecommunications and Information Technology Faculty of University Politehnica Bucharest."
        },
        {
            "title": "Experience",
            "icon" : "faBriefcase",
            "description": "Worked as QA Automation Engineer at Bitdefender between July - October 2021. Manually tested components and functionalitites, automated and created new testcases and refactored existing code."
        },
        {
            "title": "Technical",
            "icon" : "faGear",
            "description": "JavaScript | HTML | CSS | Pyhton | C++ | SwiftUI | React | Git | npm | DevTools | Bootstrap | Chakra UI | Jest | Postman API | PyTorch | PyQt |  Windows | MacOS | Linux | "
        }
    ],
    "projectsSection" : [
        {
            "title": "Website using React",
            "description" : "A website made with React to display a web developer's portofolio in a dynamic and interactive way. It displays the developer's skills, experience and projects using Chakra UI. Visiting the website, the user is greeted by a landing page that showcases their name, picture and a brief introduction. There are different sections of the website, such as 'Projects', which showcases their previous work, and 'Contact me' section which displays a form the user can send a message to the developer.",
            "technologies" : "React, JavaScript, CSS, ChakraUI, Formik",
            "image" : "Picture_2.png"
        },
        {
            "title": "Detection of eye diseases with AI",
            "description" : "Machine learning application that uses computer vision techniques to analyze, classify and diagnose medical eye fundus images. The app uses PyTorch to train a convolutional neural network, such as VGG and ResNet, on a large dataset of eye fundus images. The user provides a fundus image which is pre-processed by the app and then fed into the CNN which uses its learned weights and biases to classify the input into one of 39 possible diagnosis categories, e.g. diabetic retinopathy, glaucoma or myopia. ",
            "technologies" : "Python, PyTorch, PyQt, VGG, ResNet",
            "image" : "Picture_1.png"
        },
        {
            "title": "iOS App for managing an hospital",
            "description" : "Mobile application that uses Swift programming language and SQLite to manage an hospital database. Users can interact with the app by adding, updating and deleting data, such as adding a new appointment, updating doctor's personal information or deleting old entries. Hospital App communicates with the SQLite database in real-time, updating the data as the user interacts with it. ",
            "technologies" : "SwiftUI, SQLite",
            "image" : "Picture_3.png"
        }
    ]
        
}